server.port=${PORT:8080}

# Specify the Spanner Hibernate dialect.
spring.jpa.properties.hibernate.dialect=com.google.cloud.spanner.hibernate.SpannerDialect
spring.jpa.database-platform=com.google.cloud.spanner.hibernate.SpannerDialect

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# You may display SQL statements and stats for debugging if needed.
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

# Specify the Spanner JDBC driver.
spring.datasource.driver-class-name=com.google.cloud.spanner.jdbc.JdbcDriver

spring.datasource.url=jdbc:cloudspanner:/projects/${PROJECT_NAME}/instances/${SPANNER_INSTANCE}/databases/${SPANNER_DB}

# So app starts despite "table already exists" errors.
spring.datasource.continue-on-error=true

app.datasource.jdbc-url=jdbc:cloudspanner:/projects/${PROJECT_NAME}/instances/${SPANNER_INSTANCE}/databases/${SPANNER_DB}
#app.datasource.username=dbuser
#app.datasource.password=dbpass


spring.cloud.gcp.spanner.project-id=${PROJECT_NAME}
spring.cloud.gcp.spanner.instance-id=${SPANNER_INSTANCE}
spring.cloud.gcp.spanner.database=${SPANNER_DB}

